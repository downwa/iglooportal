#!/bin/bash

### BEGIN INIT INFO
# Provides:          iglooportal
# Required-Start:    $all
# Required-Stop:     $all
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Firewall configuration for hotel captive portal
# Description:       This init script sets the necessary iptables rules for a hotel captive portal
### END INIT INFO

# Author: Warren Downs <wdowns@choggiung.com>
#

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Hotel Captive Portal"

# Internet interface, Client interface
INET=eth0
CLI=eth1

# Router IP and Network
RIP=$(ifconfig "$CLI" | grep "inet addr:" | awk '{print $2}' | cut -d ':' -f 2)
NET=${RIP%.*}

USERS="/var/lib/iglooportal/users.txt"
IPTABLES=/sbin/iptables

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start() {
	startfw # Apply firewall rules

 	# Start a daemon which times out users who are off the net, or whose time allotment or bandwidth has been exceeded.
	/etc/init.d/timeoutd start

	# Restart relays
	/etc/init.d/relays start

	# Display status of relays
	stsrelay

	return 0
}

#
# Function that stops the daemon/service
#
do_stop() {
	stopfw # Clear firewall rules and stop relays

	# Stop dameon for timing out users
	/etc/init.d/timeoutd stop

	# Stop relays
	/etc/init.d/relays stop
}

startfw() {
	flushfw # Clear firewall rules

	mkdir -p /var/lib/iglooportal
	touch "$USERS"

	# Create table of authorized clients, populate it from flat file, and check them
	$IPTABLES -t nat    -N auth
	$IPTABLES -t nat    -A PREROUTING  -i $CLI -j auth  # FORWARD authorized clients only

	# Non-authorized clients get DNS only then are redirected to login page
	$IPTABLES -t nat    -A PREROUTING -p udp --dport    53 -j ACCEPT
	$IPTABLES -t nat    -A PREROUTING -p tcp --dport    80 -j DNAT --to-destination $RIP
	$IPTABLES -t nat    -A PREROUTING -p tcp --dport   443 -j DNAT --to-destination $RIP
	$IPTABLES -t nat    -A PREROUTING -p tcp --dport   447 -j DNAT --to-destination $RIP:443
	$IPTABLES -t nat    -A PREROUTING -p tcp --dport  9054 -j ACCEPT # Micros Terminal
	$IPTABLES -t nat    -A PREROUTING -p tcp --dport 24800 -j ACCEPT # Synergy Mouse/Keyboard: FOR DEBUGGING ONLY
	$IPTABLES -t nat    -A PREROUTING -j DNAT --to-destination $RIP

	# Enable Internet connection sharing
	echo "1" > /proc/sys/net/ipv4/ip_forward
	$IPTABLES -t filter -A FORWARD     -i $INET -o $CLI -m state --state ESTABLISHED,RELATED -j ACCEPT
	$IPTABLES -t nat    -A POSTROUTING -o $INET -j MASQUERADE

	#For even authorized clients, limit services that can be accessed
	$IPTABLES -t nat    -N serv 
	$IPTABLES -t nat    -A serv -p udp --dport    53 -j ACCEPT
	$IPTABLES -t nat    -A serv -p tcp --dport    80 -j ACCEPT
	$IPTABLES -t nat    -A serv -p tcp --dport   443 -j ACCEPT
	$IPTABLES -t nat    -A serv -p tcp --dport   447 -j ACCEPT
	$IPTABLES -t nat    -A serv -p tcp --dport  9054 -j ACCEPT # Micros Terminal
	$IPTABLES -t nat    -A serv -p tcp --dport 24800 -j ACCEPT # Synergy Mouse/Keyboard: FOR DEBUGGING ONLY
	$IPTABLES -t nat    -A serv -p icmp -j ACCEPT
	$IPTABLES -t nat    -A serv -j DNAT --to-destination $RIP

	# Allow specific client:: mac=f0:4d:a2:7f:66:77; $IPTABLES -t nat -A auth -m mac --mac-source $mac -j serv
	###### AUTHORIZED CLIENTS (serv chain) ##########
	# Allow authorised clients in, redirect all others to login webserver
	# Add known users to the NAT table to stop their dest being rewritten
	# Ignore MAC address with a * - these users are blocked
	# This awk script goes through the $USERS flat file line by line
	awk 'BEGIN { FS=","; } { system("/usr/bin/loginmac "$2" "$4); }' "$USERS"

	# Firewall rules to measure bandwidth used by clients
	accounting
}

accounting() {
	echo "Adding accounting rules for all IP addresses in subnet..."
	$IPTABLES -N acctI
	$IPTABLES -N acctO
	$IPTABLES -I FORWARD -i eth0 -j acctI
	$IPTABLES -I FORWARD -o eth0 -j acctO
	for((x=1;x<=255;x++)); do
		$IPTABLES -A acctI --dst $NET.$x
		$IPTABLES -A acctO --src $NET.$x
	done
	#$IPTABLES -n -v -x -L -Z
}

stsrelay() {
	echo "Authorized users:"
	$IPTABLES -t nat -L auth
	echo "Relay status..."
        /bin/netstat -nlp | grep tcprelay
}

flushfw() {
	# Change policy before -F in case default policy was DROP (to avoid being locked out part way through)
	$IPTABLES -P INPUT ACCEPT
	$IPTABLES -P FORWARD ACCEPT
	$IPTABLES -P OUTPUT ACCEPT
	# Flush and delete chains
	$IPTABLES -t filter -F 
	$IPTABLES -t filter -X
	$IPTABLES -t nat    -F
	$IPTABLES -t nat    -X
	$IPTABLES -t mangle -F
	$IPTABLES -t mangle -X
	$IPTABLES -t raw    -F
	$IPTABLES -t raw    -X
}

stopfw() {
	flushfw
	killall tcprelay
#	iptables-restore </etc/iptables.rules
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
	stsrelay
	;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
		# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

